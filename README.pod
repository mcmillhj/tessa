=pod 

=head1 NAME

Tessa

=head1 DESCRIPTION 

Tessa, an asset manager

=head4 BUILD-STATUS

=begin HTML

<p>
  <a href="https://travis-ci.org/mcmillhj/tessa"><img src="https://travis-ci.org/mcmillhj/tessa.svg?branch=master" /></a>
  <a href="https://coveralls.io/r/mcmillhj/tessa?branch=master"><img src="https://coveralls.io/repos/mcmillhj/tessa/badge.png?branch=master" /></a>
</p>

=end HTML

=head4 BUILDING LOCALLY

All build instructions were tested on Ubuntu 14.04 and Debian 8 servers hosted on Digital Ocean.

Things you will need to build Tessa:

=over 4 

=item I<cpanminus>

a CPAN client to install Perl modules

=item I<git> 

Distributed VCS and interface to Github

=item I<make>

a program to build Tesa

=back 

Install all dependencies, build, and test Tessa

 apt-get install cpanminus git build-essential
 git clone https://github.com/mcmillhj/tessa.git && cd tessa
 cpam --installdeps --notest .
 # may take a few minutes
 perl Makefile.PL
 make test 

Please note that this will install modules into your System Perl, the Perl your OS uses to actually do things. System Perl is notoriously fickle on OS X because Apple modifies the Perl binary. You can avoid this by using Perlbrew, which will install Perl into your home directory, and installing perl v5.18.2 from there

 \curl -L http://install.perlbrew.pl | bash
 perlbrew init 
 source ~/perl5/perlbrew/etc/bashrc
 perlbrew install --notest 5.18.2

Start a local instance of the Tessa Dancer2 application

 plackup -p 5000 bin/app.psgi

Make requests against local instance

 curl http://localhost:5000/assets
 
@

=head4 USAGE/EXAMPLE RESPONSES 
 
 # create an asset 
 curl -X POST http://tessa1.hjm.im/assets \
      -H 'Content-Type: application/json' \ 
      -d '{"name":"hunter","uri":"myorg:///users/hunter"}'
 {
  "name": "hunter",
  "notes": [],
  "uri": "myorg:///users/hunter",
  "id": "7"
 }

 # get all assets 
 curl http://tessa1.hjm.im/assets
 {
  "assets": [
    {
      "uri": "myorg:///users/hunter2",
      "id": "5",
      "name": "hunter2",
      "notes": []
    },
    {
      "id": "7",
      "uri": "myorg:///users/hunter",
      "notes": [],
      "name": "hunter"
    }
  ]
 }

 # get a single asset
 curl http://tessa1.hjm.im/assets/7
 {
  "id": "7",
  "uri": "myorg:///users/hunter",
  "name": "hunter",
  "notes": []
 }

 # update an asset 
 curl -X PUT http://tessa1.hjm.im/assets/7 \
      -H 'Content-Type: application/json' \ 
      -d '{"name":"hunter3"}'
 {
  "notes": [],
  "name": "hunter3",
  "uri": "myorg:///users/hunter",
  "id": "7"
 }

 # delete an asset 
 curl -X DELETE http://tessa1.hjm.im/assets/7

 # delete all assets
 curl -X DELETE http://tessa1.hjm.im/assets 

 # create a note for an asset 
 curl -X POST http://tessa1.hjm.im/assets/15/notes \
      -H 'Content-Type: application-json' \
      -d '{"note":"this is a note"}'
 {
  "name": "hunter",
  "uri": "myorg:///users/hunter",
  "notes": [
    {
      "asset_id": "15",
      "note": "this is a note",
      "id": "5"
    }
  ],
  "id": "15"
 } 

 # get all notes for an asset
 curl http://tessa1.hjm.im/assets/11/notes
 [
  {
    "asset_id": "15",
    "note": "this is a note",
    "id": "5"
  }
 ]
 
 # update a note for an asset
 curl -X PUT http://tessa1.hjm.im/assets/11/notes/3 \
      -H 'Content-Type: application/json' \
      -d '{"note":"this is an updated note"}'

 {
  "uri": "myorg:///users/hunter",
  "id": "15",
  "name": "hunter",
  "notes": [
    {
      "id": "5",
      "asset_id": "15",
      "note": "this is an updated note"
    }
  ]
 } 

 # delete a note for an asset
 curl -X DELETE http://tessa1.hjm.im/assets/15/notes/5

 # delete all notes for an asset
 curl -X DELETE http://tessa1.hjm.im/assets/15/notes

=head4 LOAD-TESTING

There are two scripts in bin/ write-assets-and-notes.sh and get-assets-and-notes.sh
The best way I have found to test the system is to run both of these for both hosts in four separate terminals:

 HOST=tessa1.hjm.im write-assets-and-notes.sh
 HOST=tessa1.hjm.im get-assets-and-notes.sh
 HOST=tessa2.hjm.im write-assets-and-notes.sh
 HOST=tessa2.hjm.im get-assets-and-notes.sh

at peak usage I saw ~500 queries per second in mytop and ~48 CPU usage in top. However I quickly ran out of available memory while attempting to loadtest, the Digital Ocean boxes only have 1CPU and 1GB of RAM so there isn't much to do about that. 

=cut
